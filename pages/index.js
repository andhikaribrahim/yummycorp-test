import Head from 'next/head'
import styled, { keyframes } from 'styled-components';
import { useReducer, useRef, useState } from 'react';
import Draggable from 'react-draggable';
import { useGesture } from 'react-use-gesture';

const bounce = keyframes`
  from {
    transform: translateY(250px);
  }

  to {
    transform: translateY(0px);
  }
`;

const HueBackground = styled.div.attrs(() => ({
  className: `fixed bottom-10 flex rounded-full`
}))`
  width: 200px;
  height: 28px;
  background: url(hue.png) center;
  background: -moz-linear-gradient(left, #F00 0%, #FF0 16.66%, #0F0 33.33%, #0FF 50%, #00F 66.66%, #F0F 83.33%, #F00 100%);
  background: -webkit-linear-gradient(left, #F00 0%, #FF0 16.66%, #0F0 33.33%, #0FF 50%, #00F 66.66%, #F0F 83.33%, #F00 100%);
  background: -ms-linear-gradient(left, #F00 0%, #FF0 16.66%, #0F0 33.33%, #0FF 50%, #00F 66.66%, #F0F 83.33%, #F00 100%);
  background: -o-linear-gradient(left, #F00 0%, #FF0 16.66%, #0F0 33.33%, #0FF 50%, #00F 66.66%, #F0F 83.33%, #F00 100%);
`;

const Slider = styled.div.attrs(() => ({
  className: `cursor-move rounded-full border-4 border-white`
}))`
  width: 28px;
  height: 100%;
  background-color: #FFF;
  position: relative;
  background-color: ${props => `hsla(${Object.values(props.color).join(',')})`};
`;

const Ball = styled.div.attrs(() => ({
  className: `flex rounded-full`
}))`
  height: ${props => (props.scale + 48)}px;
  width: ${props => props.scale + 48}px;
  background-color: ${props => `hsla(${Object.values(props.color).join(',')})`};
  touch-action: 'none';
  animation: ${bounce} 1s 0.6s ease-in infinite alternate;
  transition: width .375s ease-in, height .375 ease-in;
`;

export default function Home() {
  const [color, setColor] = useReducer(
    (state, newState) => ({ ...state, ...newState }),
    { h: 0, s: '100%', l: '50%', a: 1 }
  );
  const boundRect = useRef(null);

  const handleSetHue = hue => setColor({ ...color, h: hue });
  const handleDrag = (_, ui) => {
    const parentWidth = boundRect.current.clientWidth;
    const parentHeight = boundRect.current.clientHeight;
    const threshold = 359; // max number of hue
    const ratio = threshold / (parentWidth - parentHeight);
    const cursorPosition = ui.x;
    handleSetHue(Math.ceil(cursorPosition * ratio));
  };

  const ball = useRef(null);
  const [scale, setScale] = useState(1);
  useGesture({
    onPinch: ({ offset: [d], }) => {
      if (d < 0) {
        return 1;
      }
      const ratio = d / 10;
      setScale(1 + ratio);
    }
  }, {
    domTarget: ball,
    eventOptions: { passive: false },
    pinch: { scaleBounds: { min: 0.5, max: 2 }, rubberband: true },
  });

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="viewport" content="width=device-width, user-scalable=no" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container my-6 mx-auto max-w-lg">
        <div className="flex flex-col items-center">
          <div className="flex flex-row justify-center" ref={ball} style={{ minHeight: '100vh', width: '100%' }}>
            <Ball color={color} scale={scale} />
          </div>

          <HueBackground ref={boundRect}>
            <Draggable
              axis="x"
              bounds="parent"
              onDrag={handleDrag}
            >
              <Slider color={color} />
            </Draggable>
          </HueBackground>
        </div>
      </div>
    </div>
  )
}
